// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package resource

import "github.com/aelsabbahy/goss/system"

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type AddrMap map[string]*Addr

func (r AddrMap) AppendSysResource(sr string, sys *system.System) (*Addr, system.Addr) {
	sysres := sys.NewAddr(sr, sys)
	res := NewAddr(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r AddrMap) AppendSysResourceIfExists(sr string, sys *system.System) (*Addr, system.Addr, bool) {
	sysres := sys.NewAddr(sr, sys)
	res := NewAddr(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type CommandMap map[string]*Command

func (r CommandMap) AppendSysResource(sr string, sys *system.System) (*Command, system.Command) {
	sysres := sys.NewCommand(sr, sys)
	res := NewCommand(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r CommandMap) AppendSysResourceIfExists(sr string, sys *system.System) (*Command, system.Command, bool) {
	sysres := sys.NewCommand(sr, sys)
	res := NewCommand(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type DNSMap map[string]*DNS

func (r DNSMap) AppendSysResource(sr string, sys *system.System) (*DNS, system.DNS) {
	sysres := sys.NewDNS(sr, sys)
	res := NewDNS(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r DNSMap) AppendSysResourceIfExists(sr string, sys *system.System) (*DNS, system.DNS, bool) {
	sysres := sys.NewDNS(sr, sys)
	res := NewDNS(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type FileMap map[string]*File

func (r FileMap) AppendSysResource(sr string, sys *system.System) (*File, system.File) {
	sysres := sys.NewFile(sr, sys)
	res := NewFile(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r FileMap) AppendSysResourceIfExists(sr string, sys *system.System) (*File, system.File, bool) {
	sysres := sys.NewFile(sr, sys)
	res := NewFile(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type GossfileMap map[string]*Gossfile

func (r GossfileMap) AppendSysResource(sr string, sys *system.System) (*Gossfile, system.Gossfile) {
	sysres := sys.NewGossfile(sr, sys)
	res := NewGossfile(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r GossfileMap) AppendSysResourceIfExists(sr string, sys *system.System) (*Gossfile, system.Gossfile, bool) {
	sysres := sys.NewGossfile(sr, sys)
	res := NewGossfile(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type GroupMap map[string]*Group

func (r GroupMap) AppendSysResource(sr string, sys *system.System) (*Group, system.Group) {
	sysres := sys.NewGroup(sr, sys)
	res := NewGroup(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r GroupMap) AppendSysResourceIfExists(sr string, sys *system.System) (*Group, system.Group, bool) {
	sysres := sys.NewGroup(sr, sys)
	res := NewGroup(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type PackageMap map[string]*Package

func (r PackageMap) AppendSysResource(sr string, sys *system.System) (*Package, system.Package) {
	sysres := sys.NewPackage(sr, sys)
	res := NewPackage(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r PackageMap) AppendSysResourceIfExists(sr string, sys *system.System) (*Package, system.Package, bool) {
	sysres := sys.NewPackage(sr, sys)
	res := NewPackage(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type PortMap map[string]*Port

func (r PortMap) AppendSysResource(sr string, sys *system.System) (*Port, system.Port) {
	sysres := sys.NewPort(sr, sys)
	res := NewPort(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r PortMap) AppendSysResourceIfExists(sr string, sys *system.System) (*Port, system.Port, bool) {
	sysres := sys.NewPort(sr, sys)
	res := NewPort(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type ProcessMap map[string]*Process

func (r ProcessMap) AppendSysResource(sr string, sys *system.System) (*Process, system.Process) {
	sysres := sys.NewProcess(sr, sys)
	res := NewProcess(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r ProcessMap) AppendSysResourceIfExists(sr string, sys *system.System) (*Process, system.Process, bool) {
	sysres := sys.NewProcess(sr, sys)
	res := NewProcess(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type ServiceMap map[string]*Service

func (r ServiceMap) AppendSysResource(sr string, sys *system.System) (*Service, system.Service) {
	sysres := sys.NewService(sr, sys)
	res := NewService(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r ServiceMap) AppendSysResourceIfExists(sr string, sys *system.System) (*Service, system.Service, bool) {
	sysres := sys.NewService(sr, sys)
	res := NewService(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}

//go:generate sed -i -e "/^\\/\\/ +build genny/d" resource_list.go

type UserMap map[string]*User

func (r UserMap) AppendSysResource(sr string, sys *system.System) (*User, system.User) {
	sysres := sys.NewUser(sr, sys)
	res := NewUser(sysres)
	r[res.ID()] = res
	return res, sysres
}

func (r UserMap) AppendSysResourceIfExists(sr string, sys *system.System) (*User, system.User, bool) {
	sysres := sys.NewUser(sr, sys)
	res := NewUser(sysres)
	if e, _ := sysres.Exists(); e != true {
		return res, sysres, false
	}
	r[res.ID()] = res
	return res, sysres, true
}
